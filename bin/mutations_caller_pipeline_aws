#!/usr/bin/env ruby
require 'mutations_caller_pipeline_aws'
require 'optparse'
require 'rubygems'
require 'yaml'
require 'csv'
=begin
  * Name: Mutations Caller Pipeline (AWS)
  * Pipeline combining bwa with GATK2
  * Author: Katharina Hayer
  * Date: 8/8/2012
  * License: GNU General Public License (GPL-2.0)
=end

usage =<<EOF
_________________________________________________________________________________________________

  #{$0}
        -m mutant_r1.fq -n mutant_r2.fq
        [-w wildtype_r1.fq -x wildtype_r2.fq]
        -c config.yml -v raw_vcf_file
        [-a account || -p project]
        -s SampleSheet.csv
        -f dbsnp_file
_________________________________________________________________________________________________

  #{$0} ...
  ... is a tool to find mutations between the reference gene and a given test
  population. To run this tool you must have bwa, samtools and GATK installed.
  Also you should have the indices for bwa and GATK prepared.
  NOTE: Only paired end reads are supported!

                      +++  C L U S T E R  V E R S I O N - 0.0.21 +++

  config.yml should look like this:
  # config.yml
  bwa_prefix: "path/to/prefix"
  picard_tools: "path/to/picard_tools/"
  bwa: "path/to/bwa"
  samtools: "path/to/samtools"
  gatk: "path/to/GenomeAnalysisTK.jar"
_________________________________________________________________________________________________

EOF

options = { :mutant_r1 => nil,
            :mutant_r2 => nil,
            :wildtype_r1 => nil,
            :wildtype_r2 => nil,
            :index_prefix => nil,
            :index_fa => nil,
            :index_vcf => nil,
            :annotation_file => nil,
            :samtools => nil,
            :gatk => nil,
            :bwa => nil,
            :vcf => nil,
            :account => "",
            :project => "",
            :debug => 1,
            :cluster => false,
            :coverage => false,
            :samplesheet => nil
          }

optparse = OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-m", "--fwd_read_mutant DIR", :REQUIRED, String, "Path to fwd read of mutant") do |i|
    options[:mutant_r1] = i
  end

  opts.on("-n", "--rev_read_mutant DIR", :REQUIRED, String, "Path to rev read of mutant") do |i|
    options[:mutant_r2] = i
  end

  opts.on("-w", "--fwd_read_wildtype DIR", String, "Path to fwd read of wildtype, not mandatory") do |i|
    options[:wildtype_r1] = i if i
  end

  opts.on("-x", "--rev_read_wildtype DIR", String, "Path to rev read of wildtype, not mandatory") do |i|
    options[:wildtype_r2] = i if i
  end

  opts.on("-c", "--config DIR", String, "Set config file") do |path|
    options.merge!(Hash[YAML::load(open(path)).map { |k, v| [k.to_sym, v] }])
  end

  opts.on("-v","--vcf [PATH]", "Output of pipeline") do |i|
    options[:vcf] = i
  end

  opts.on("-a","--account [NAME]", "Option for qsub: -A [NAME]. Default: [none] " ) do |i|
    options[:account] = " -A #{i}" if i
  end

  opts.on("-p","--project [NAME]", "Option for qsub: -P [NAME]. Default: [none] " ) do |i|
    options[:project] = " -P #{i}" if i
  end

  opts.on("-d","--debug ", "Option to debug" ) do |i|
    options[:debug] =  5 if i
  end

  opts.on("-k","--cluster ", "On compute cluster (none AWS)" ) do |i|
    options[:cluster] =  true if i
  end

  opts.on("-o","--coverage ", "GATK Coverage summary" ) do |i|
    options[:coverage] =  true if i
  end

  opts.on("-s", "--sampleSheet DIR", :REQUIRED, String, "SampleSheet.csv") do |i|
    options[:samplesheet] = i
  end

  opts.on("-f", "--dbsnp_file DIR", :REQUIRED, String, "dbsnp.vcf") do |i|
    options[:dbsnp_file] = i
  end

  opts.on("-b", "--sample_name Name", :REQUIRED, String, "Sample name / SampleID") do |i|
    options[:sample_name] = i
  end


  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:dbsnp_file,:picard_tools, :samplesheet, :mutant_r1, :mutant_r2, :bwa_prefix,
    :bwa, :samtools, :gatk, :vcf, :index_vcf, :sample_name, :index_fa]
  missing = mandatory.select{ |param| options[param].nil? }
  if !missing.empty?
    puts "\nMissing options given or missing in config_file: \n\t#{missing.join(",\n\t")}"
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
   puts $!.to_s
   puts optparse
   exit
end

# Methods
def execute(cmd)
  puts cmd
  status = system(cmd)
  raise cmd unless status
end

def run(options)
  # tmp files for output
  job_number = options[:job_number]
  bam_file = "aligned_#{job_number}.bam"
  bam_file_sorted = "sorted_#{job_number}.bam"
  bam_file_sorted_duplicates = options[:step_one_bam_file]
  duplicate_metrcis = "GATK_files/duplicates.metrics"
  job_prefix = "#{job_number}"
  log_file = "log/#{options[:sample_name]}.log"

  cmd = PicardCaller.convert(options[:sam_file], bam_file, options[:picard_tools],
    log_file, job_prefix, options[:account])

  if options[:debug] == 1
    execute(cmd)
  else
    puts cmd
  end

  cmd = PicardCaller.rg_and_sorting(bam_file, bam_file_sorted, options[:picard_tools],
    options[:library], options[:index], options[:sample_name],
    log_file, options[:id], job_prefix, options[:account])

  if options[:debug] == 1
    execute(cmd)
  else
    puts cmd
  end

  cmd = PicardCaller.mark_duplicates(bam_file_sorted, bam_file_sorted_duplicates,
    duplicate_metrcis, options[:picard_tools], log_file, job_prefix,
    options[:account])

  if options[:debug] == 1
    execute(cmd)
  else
    puts cmd
  end

  cmd = PicardCaller.build_index(bam_file_sorted_duplicates,
    options[:picard_tools], log_file, job_prefix, options[:account])

  if options[:debug] == 1
    execute(cmd)
  else
    puts cmd
  end
end


# pipeline starts here

# get information from sample sheet
CSV.foreach(options[:samplesheet],{:headers => :first_row}) do |row|
  if options[:sample_name] == row["SampleID"]
    options[:index] = row["Index"]
    lane = row["Lane"]
    sample_project = row["SampleProject"]
    options[:id] = "#{sample_project}_#{lane}_#{sample_name}"
    options[:library] = row["FCID"]
  end
end

# Create Dir to not overcluster output folder
Dir.mkdir("GATK_files") unless File.exists?("GATK_files")
Dir.mkdir("log") unless File.exists?("log")

# tmp files for output
random = (rand*1000000).floor.to_s
sample_name = options[:sample_name]
options[:sam_file] = "#{sample_name}_#{random}.sam"
options[:step_one_bam_file] = "#{sample_name}_#{random}.bam"
bam_file = "mutant_#{random}.bam"
job_prefix = "#{random}"
options[:job_number] = job_prefix
log_file = "log/#{sample_name}.log"
target_intervals = "GATK_files/target.intervals"
realigned_bam = "#{random}_realigned.bam"
recal_file = "GATK_files/recal.grp"
recal_bam = "#{sample_name}.bam"
sai_file_fwd = "#{random}_fwd.sai"
sai_file_rev = "#{random}_rev.sai"

options[:account] = options[:project] if options[:account].empty?
#options[:gatk] = "java -Xmx8g -jar #{options[:gatk]}"

# BWA : ALN
BwaCaller.call_aln(options[:mutant_r1],
                   options[:bwa_prefix],
                   sai_file_fwd,
                   log_file,
                   options[:bwa],
                   job_prefix,
                   options[:account],
                   options[:debug],"fwd")

BwaCaller.call_aln(options[:mutant_r2],
                   options[:bwa_prefix],
                   sai_file_rev,
                   log_file,
                   options[:bwa],
                   job_prefix,
                   options[:account],
                   options[:debug],"rev")


# BWA : First step mapping reads to reference
BwaCaller.call_paired_end(options[:mutant_r1],
                          options[:mutant_r2],
                          sai_file_fwd,
                          sai_file_rev,
                          options[:sam_file],
                          options[:bwa_prefix],
                          log_file,
                          options[:bwa],
                          options[:samtools],
                          job_prefix,
                          options[:account],
                          options[:debug])


# Indexing + Marking Duplicates
run(options)
#bam_file = bam_file + ".bam"
#SamtoolsIndexing.call(bam_file,
#                      job_prefix,
#                      options[:account],
#                      options[:debug],
#                      log_file)

# Realigne
GatkCaller.prepare_realigne(log_file,
                            options[:gatk],
                            options[:step_one_bam_file],
                            options[:index_fa],
                            target_intervals,
                            job_prefix,
                            options[:account],
                            options[:dbsnp_file],
                            options[:debug])


GatkCaller.realigne(log_file,
                    options[:gatk],
                    options[:step_one_bam_file],
                    options[:index_fa],
                    target_intervals,
                    realigned_bam,
                    job_prefix,
                    options[:account],
                    options[:debug])

# Recalibration
GatkCaller.recalibrate_bam( log_file,
                            options[:gatk],
                            options[:index_fa],
                            realigned_bam,
                            recal_file,
                            job_prefix,
                            options[:account],
                            options[:dbsnp_file],
                            options[:debug] )

GatkCaller.table_calibration(log_file,
                             options[:gatk],
                             options[:index_fa],
                             realigned_bam,
                             recal_bam,
                             recal_file,
                             job_prefix,
                             options[:account],
                             options[:debug])

# GATK: finding mutations
GatkCaller.call(log_file,
                options[:gatk],
                options[:index_fa],
                recal_bam,
                options[:vcf],
                job_prefix,
                options[:account],
                options[:dbsnp_file],
                options[:debug])


# GATK : coverage
if options[:coverage]
  outfile_prefix = options[:vcf].gsub(/.vcf/,"_coverage")
  GatkCaller.coverage(
    log_file,
    options[:gatk],
    options[:index_fa],
    recal_bam,
    outfile_prefix,
    job_prefix,
    options[:account],
    options[:debug])
end
