#!/usr/bin/env ruby
require 'mutations_caller_pipeline_aws'
require 'optparse'
require 'rubygems'
require 'yaml'

###
#   NOT FUNTIONAL ANYMORE
###
usage =<<EOF
_________________________________________________________________________________________________

  #{$0}
        -b sorted_bam_file
        -c config.yml -v raw_vcf_file
        [-a account || -p project]
        -s SampleSheet.csv

_________________________________________________________________________________________________

  #{$0} ...
  ... is a tool to find mutations between the reference gene and a given test
  population. To run this tool you must have bwa, samtools and GATK installed.
  Also you should have the indices for bwa and GATK prepared.
  NOTE: Only paired end reads are supported!

                      +++  C L U S T E R  V E R S I O N  +++

  config.yml should look like this:
  # config.yml
  index_prefix: "path/to/prefix"
  annotation_file: "path/to/annotation_file"
  bwa: "path/to/bwa"
  samtools: "path/to/samtools"
  gatk: "path/to/GenomeAnalysisTK.jar"
_________________________________________________________________________________________________

EOF

options = { :bam_file_sorted => nil,
            :index_prefix => nil,
            :index_fa => nil,
            :index_vcf => nil,
            :annotation_file => nil,
            :samtools => nil,
            :gatk => nil,
            :bwa => nil,
            :vcf => nil,
            :account => "",
            :project => "",
            :debug => 1,
            :samplesheet => nil
          }

optparse = OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-b", "--bam_file_sorted DIR", :REQUIRED, String, "Bam file sorted") do |i|
    options[:bam_file_sorted] = i
  end

  opts.on("-c", "--config DIR",:REQUIRED, String, "Set config file") do |path|
    options.merge!(Hash[YAML::load(open(path)).map { |k, v| [k.to_sym, v] }])
  end

  opts.on("-v","--vcf [PATH]",:REQUIRED, String, "Output of pipeline") do |i|
    options[:vcf] = i
  end

  opts.on("-a","--account [NAME]", "Option for qsub: -A [NAME]. Default: [none] " ) do |i|
    options[:account] = " -A #{i}" if i
  end

  opts.on("-p","--project [NAME]", "Option for qsub: -P [NAME]. Default: [none] " ) do |i|
    options[:project] = " -P #{i}" if i
  end

  opts.on("-d","--debug ", "Option to debug" ) do |i|
    options[:debug] =  5 if i
  end

  opts.on("-s", "--sampleSheet DIR", :REQUIRED, String, "SampleSheet.csv") do |i|
    options[:samplesheet] = i
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:samplesheet, :bam_file_sorted, :index_prefix, :annotation_file,
    :bwa, :samtools, :gatk, :vcf, :index_vcf, :index_fa]
  missing = mandatory.select{ |param| options[param].nil? }
  if !missing.empty?
    puts "\nMissing options given or missing in config_file: \n\t#{missing.join(",\n\t")}"
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
   puts $!.to_s
   puts optparse
   exit
end

# pipeline starts here

# tmp files for output
random = (rand*1000000).floor.to_s
bam_file = options[:bam_file_sorted]
job_prefix = "#{random}"
log_file = "#{random}.log"
target_intervals = "#{random}_target.intervals"
realigned_bam = "#{random}_realigned.bam"
recal_file = "#{random}_recal.csv"
recal_bam = "#{random}_recal.bam"


options[:account] = options[:project] if options[:account].empty?



# Indexing + Mark Duplicates
SamtoolsIndexing.call(bam_file,
                      job_prefix,
                      options[:account],
                      options[:debug],
                      log_file)

# Realigne
GatkCaller.prepare_realigne(log_file,
                            options[:gatk],
                            bam_file,
                            options[:index_fa],
                            target_intervals,
                            job_prefix,
                            options[:account],
                            options[:debug])

GatkCaller.realigne(log_file,
                    options[:gatk],
                    bam_file,
                    options[:index_fa],
                    target_intervals,
                    realigned_bam,
                    job_prefix,
                    options[:account],
                    options[:debug])

# Recalibration
GatkCaller.recalibrate_bam( log_file,
                            options[:gatk],
                            options[:index_fa],
                            options[:index_vcf],
                            realigned_bam,
                            recal_file,
                            job_prefix,
                            options[:account],
                            options[:debug] )

GatkCaller.table_calibration(log_file,
                             options[:gatk],
                             options[:index_fa],
                             realigned_bam,
                             recal_bam,
                             recal_file,
                             job_prefix,
                             options[:account],
                             options[:debug])

# GATK: finding mutations
GatkCaller.call(log_file,
                options[:gatk],
                options[:index_fa],
                recal_bam,
                options[:vcf],
                job_prefix,
                options[:account],
                options[:debug])