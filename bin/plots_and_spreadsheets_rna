#!/usr/bin/env ruby
require 'mutations_caller_pipeline_aws'
require 'optparse'
require 'rubygems'
require 'yaml'
require 'csv'
require 'logger'
=begin
  * Name: PlotsAndSpreadsheets
  * This script generates spreadsheets and homozygosity scores plots
  * from a given file of processed vcf files.
  * Author: Katharina Hayer
  * Date: 3/1/2015
  * License: GNU General Public License (GPL-2.0)
=end

$logger = Logger.new(STDERR)

# Initialize logger
def setup_logger(loglevel)
  case loglevel
  when "debug"
    $logger.level = Logger::DEBUG
  when "warn"
    $logger.level = Logger::WARN
  when "info"
    $logger.level = Logger::INFO
  else
    $logger.level = Logger::ERROR
  end
end

$usage =<<EOF
_________________________________________________________________________________________________

  #{$0} sample_name config.yml [OPTIONS]
_________________________________________________________________________________________________

  #{$0} ...
  ... is a wrapper to take processed vcf files and prepares homozygosity
  plots and variant spreadsheets.

                      +++ V E R S I O N - 0.0.1 +++

  config.yml should look like this:
  # config.yml
  parent_strain1: "Wik"
  parent_strain2: "TLF"
  window_size: "100"
  quality: "5"
  phast_cons: "path/to/phastConsElements8way.txt"
_________________________________________________________________________________________________

EOF

def setup_options(args)
  options = {
    #:gatk => nil,
    #:bwa => nil,
    #:vcf => nil,
    :debug => false,
    :pre_num => 0,
    #:lsf => false,
    #:threads => 1,
    :log_level => "info",
    :folder_name => "vcf_by_chromosome",
    :sibling => "none"
  }
  #:cluster => false,
  #:samtools => nil,
  #:wildtype_r1 => nil,
  #:wildtype_r2 => nil,
  #:account => "",
  #:project => "",

  optparse = OptionParser.new do |opts|
    opts.banner = $usage

    #opts.on("-m", "--fwd_read_mutant DIR", :REQUIRED, String, "Path to fwd read of mutant") do |i|
    #  options[:mutant_r1] = i
    #end
#
    #opts.on("-n", "--rev_read_mutant DIR", :REQUIRED, String, "Path to rev read of mutant") do |i|
    #  options[:mutant_r2] = i
    #end

    #opts.on("-w", "--fwd_read_wildtype DIR", String, "Path to fwd read of wildtype, not mandatory") do |i|
    #  options[:wildtype_r1] = i if i
    #end
#
    #opts.on("-x", "--rev_read_wildtype DIR", String, "Path to rev read of wildtype, not mandatory") do |i|
    #  options[:wildtype_r2] = i if i
    #end

    #opts.on("-v","--vcf [PATH]", "Output of pipeline") do |i|
    #  options[:vcf] = i
    #end
#
    #opts.on("-a","--account [NAME]", "Option for qsub: -A [NAME]. Default: [none] " ) do |i|
    #  options[:account] = " -A #{i}" if i
    #end
#
    #opts.on("-p","--project [NAME]", "Option for qsub: -P [NAME]. Default: [none] " ) do |i|
    #  options[:project] = " -P #{i}" if i
    #end
#
    #opts.on("-o","--coverage", "GATK Coverage summary" ) do
    #  options[:coverage] = true
    #end

    opts.on("-l", "--lsf", "LSF instead of SGE. DEFAULT: SGE") do
      options[:lsf] = true
    end

    #opts.on("-s", "--sampleSheet DIR", :REQUIRED, String, "SampleSheet.csv") do |i|
    #  options[:samplesheet] = i
    #end
#
    #opts.on("-f", "--dbsnp_file DIR", :REQUIRED, String, "dbsnp.vcf") do |i|
    #  options[:dbsnp_file] = i
    #end

    opts.on("-t", "--threads INT", :REQUIRED, Integer, "Number of threads. DEFAULT: 1") do |i|
      options[:threads] = i
    end

    opts.on("-p", "--previousNum INT", :REQUIRED, Integer, "Number from previous run if available.") do |i|
      options[:pre_num] = i
    end

    #opts.on("-s", "--sibling Name", :REQUIRED, String, "Name of sibling e.g. 46FWGA_sib, DEFAULT:none") do |i|
    #  options[:sibling] = i
    #end

    opts.on("-f", "--folder_name Name", :REQUIRED, String, "Folder name for splitted vcf files [DEFAULT: vcf_by_chromosome]") do |i|
      options[:folder_name] = i
    end


    opts.on("-d", "--debug", "Run in debug mode") do
      options[:log_level] = "debug"
      options[:debug] = true
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  begin
    optparse.parse!(args)
    if args.length == 0
      puts optparse
      exit 1
    end
    options.merge!(Hash[YAML::load(open(args[1])).map { |k, v| [k.to_sym, v] }])
    mandatory = [:parent_strain1, :parent_strain2, :window_size, :quality, :phast_cons]
    missing = mandatory.select{ |param| options[param].nil? }
    if !missing.empty?
      puts "\nMissing options given or missing in config_file: \n\t#{missing.join(",\n\t")}"
      puts optparse
      exit
    end
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument
     puts $!.to_s
     puts optparse
     exit
  end
  options
end

def wait(running_jobs)
  not_finished = true

  while not_finished
    break if running_jobs.length == 0
    sleep 50
    running_jobs.each_pair do |key,files|
      l = `bjobs -l #{key}`.gsub(/\s/,"")
      case
      when l =~ /(Status<RUN>|Status<PEND>)/
        next
      when l =~ /Status<EXIT>/
        raise "#{key} died while running \"#{files}\" "
        running_jobs.delete(key)
      when l =~ /Status<DONE>/
        # merge
        #puts "Graph id #{files[0]} done succesfully"
        $logger.info("Job #{key} was succesful running \"#{files}\"")
        running_jobs.delete(key)
      end
    end
  end
end

def run(argv)
  home  = File.expand_path(File.dirname(__FILE__)).sub(/\/bin$/,"")
  #puts home
  running_jobs ={}
  options = setup_options(argv)
  setup_logger(options[:log_level])

  $logger.debug(options)
  $logger.info(argv)
  sample_name = argv[0]
  options[:sibling] = "#{sample_name}sib"
  sample_name = "#{sample_name}mut"
  sibling_number = 0

  # Determine sample numbers
  l = `grep -v ^\#\# #{options[:folder_name]}/chr1.vcf | head -1`
  fields = l.chomp.split("\t")
  #puts l
  #puts options[:parent_strain2]
  #tlf_number = fields.index(options[:parent_strain2])-8
  #wik_number = fields.index(options[:parent_strain1])-8
  begin
      sample_number = fields.index(sample_name)-8
  rescue Exception => e
      $logger.error("Sample_name #{sample_name} was not found in #{options[:folder_name]}/chr1.vcf.")
      exit 1
  end
  if options[:sibling] != "none"
    begin
      sibling_number = fields.index(options[:sibling])-8
    rescue Exception => e
      $logger.error("Sibling_name #{options[:sibling]} was not found in #{options[:folder_name]}/chr1.vcf.")
      exit 1
    end
  end
  #puts l
  remaining_numbers = []
  (9..fields.length-1).to_a.each do |i|
    #puts i
    case i-8
    when tlf_number, wik_number, sibling_number, sample_number

    else
      next if fields[i] =~ /_sib$/
      remaining_numbers << i - 8
    end
  end
  remaining_numbers = remaining_numbers.join(",")
  #puts remaining_numbers
  #exit
  sibling_number = "" if sibling_number == 0
  ### Start scoring
  scoring_dir = "scores_#{sample_name}_ws#{options[:window_size]}_q#{options[:quality]}_slider"
  id = rand(100000)+1
  if options[:pre_num] != 0
    id = options[:pre_num]
  end
  $logger.info("Your current id is #{id}")

  begin
    Dir.mkdir(scoring_dir)
  rescue Exception => e
    $logger.warn("Directory #{scoring_dir} does already exist.")
  end

  [(1..25).to_a,"M"].flatten.each do |i|
    #puts "#{scoring_dir}/chr#{i}_#{sample_name}"
    next if File.size?("#{scoring_dir}/chr#{i}_#{sample_name}")
    #cmd = "bsub -o #{id}_chr#{i}_%J_o.log -e #{id}_chr#{i}_%J_e.log grep -e ^# -w -e chr#{i} output_#{id}.ann.gatk.vcf \\> #{options[:folder_name]}/chr#{i}.vcf"
    cmd = "bsub -o #{scoring_dir}/#{id}_score_chr#{i}_%J_o.log -e #{scoring_dir}/#{id}_score_chr#{i}_%J_e.log #{home}/scripts/homozygosity_score_3_7_13_sliding_window #{options[:folder_name]}/chr#{i}.vcf #{sample_number} #{tlf_number},#{wik_number} chr#{i} #{scoring_dir}/chr#{i} #{options[:quality]} #{options[:window_size]} \\> #{scoring_dir}/chr#{i}_#{sample_name}"
    if options[:debug]
      puts cmd
    else
      l = `#{cmd}`
      l =~ /\<(\d*)\>/
      running_jobs[$1] = cmd
    end
  end
  wait(running_jobs)

  # Generate Plots
  # Rscript quick_generic.r scores_$sample_name\_ws$window_size\_q$quality\_slider $sample_name $window_size
  unless File.size?("#{scoring_dir}/chr25_poly.png")
    cmd = "bsub -o #{scoring_dir}/#{id}_rscript_%J_o.log -e #{scoring_dir}/#{id}_rscript_%J_e.log Rscript #{home}/scripts/quick_generic.r #{scoring_dir} #{sample_name} #{options[:window_size]}"
    if options[:debug]
      puts cmd
    else
      l = `#{cmd}`
      l =~ /\<(\d*)\>/
      running_jobs[$1] = cmd
    end
  end

  wait(running_jobs)

  # create spreadsheets
  # ~/tools/scripts/create_spreadsheet_125FBGB snpEff_chr$i.Zv9.74.vcf xls_sheets_125FBGB/125FBGB_Chr$i\_HIGH.xls 4 1,2,3,5,6,7,9,11,12,13,14 18 19 ~/index/phastConsElements8way.txt scores_125FBGB_ws100_q10/chr$i\_125FBGB
  spreatsheet_dir="xls_sheets_#{sample_name}"
  begin
    Dir.mkdir(spreatsheet_dir)
  rescue Exception => e
    $logger.warn("Directory #{spreatsheet_dir} does already exist.")
  end
  [(1..25).to_a,"M"].flatten.each do |i|
    #puts "#{scoring_dir}/chr#{i}_#{sample_name}"
    next if File.size?("#{spreatsheet_dir}/chr#{i}.xls")
    #cmd = "bsub -o #{id}_chr#{i}_%J_o.log -e #{id}_chr#{i}_%J_e.log grep -e ^# -w -e chr#{i} output_#{id}.ann.gatk.vcf \\> #{options[:folder_name]}/chr#{i}.vcf"
    cmd = "bsub -o #{spreatsheet_dir}/#{id}_xls_chr#{i}_%J_o.log -e #{spreatsheet_dir}/#{id}_xls_chr#{i}_%J_e.log #{home}/scripts/create_spreadsheet_zv9 #{options[:folder_name]}/chr#{i}.vcf #{spreatsheet_dir}/chr#{i}.xls #{sample_number} #{remaining_numbers} #{tlf_number} #{wik_number} #{options[:phast_cons]} #{scoring_dir}/chr#{i}_#{sample_name}"
    if options[:debug]
      puts cmd
    else
      l = `#{cmd}`
      l =~ /\<(\d*)\>/
      running_jobs[$1] = cmd
    end
  end
  wait(running_jobs)
  $logger.info("ALL DONE!")
end

#if __FILE__ == $0
  run(ARGV)
#end
